import streamlit as st
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
import google.generativeai as genai
import os
import requests
from io import BytesIO
import gdown


def download_and_load_pickle(file_id):
    url = f"https://drive.google.com/uc?id={file_id}"
    output_path = "downloaded_file.pkl"

    if not os.path.exists(output_path):
        gdown.download(url, output_path, quiet=False)
    else:
        print("‚úÖ File already downloaded. Skipping download.")
    return pd.read_pickle(output_path)


# Use the file ID directly from Google Drive URL

file_id = "1T8ZJaRFLrCaPCyE2P_QOUe5bCFhenT-W"

df = download_and_load_pickle(file_id)


# Streamlit App Configuration
st.set_page_config(page_title="NIHR Project Query Tool", layout="wide")
st.title("üîç NIHR Project Query Tool")

st.markdown("""
This tool allows you to query (in plain English) projects supported by NIHR Infrastructure during 2022/23 and 2023/24, providing a summary generated by the Gemini AI model.
- Enter your **Google API Key** (Google "Google AI Studio", anyone with a Google account can get a key with only a few clicks).
- Enter your **query** (e.g., "cancer research").
- Enter what you would like the focus of the response to be (e.g, "group the work by infrastructure scheme")
- Receive an **overview of relevant projects**.
- Optional: Export **text file** of summary and/or **csv of the 250 closest matching projects**.

**Please note:** Language models can make errors, only use these results as an overview and validate prior to sharing further.
""")

# User Input: API Key and Query
api_key = st.text_input("üîë Enter your Google API Key:", type="password")
query = st.text_input("üìù Enter your query:")
focus_on = st.text_input("üìù Enter what you would like the response to focus on (optional):")

# Prompt construction with 'focus on'
focus_text = f"\nFocus particularly on: {focus_on}." if focus_on else ""

if api_key and query and not df.empty:
    try:
        # Load Data
        df['text_for_prompt'] = (
                    "Project Identifier (unique for each year and centre): " + 
                    "Financial Year: " + df['Financial Year'] + "\n\n" +
                    "Project Title: " + df['Study Title'] + "\n\n" +
                    "Research Summary: " + df['Project Summary'] + "\n\n" +
                    "Centre: " + df['Centre'] + "\n\n" +
                    "Centre Theme: " + df["Research Theme"] + "\n\n" +
                    "Researcher: " + df["PI Full Name"]
                )

        # Configure Gemini API
        genai.configure(api_key=api_key)

        # Function to generate query embeddings
        def generate_embedding(text):
            response = genai.embed_content(
                model="models/text-embedding-004",
                content=text,
                task_type="semantic_similarity",
            )
            return np.array(response['embedding']).reshape(1, -1)

        # Generate embedding for the query
        with st.spinner("üîÑ Generating query embedding..."):
            query_embedding = generate_embedding(query)

        # Prepare embeddings matrix
        embeddings_matrix = np.vstack(df['embeddings'].values)

        # Calculate cosine similarity
        similarities = cosine_similarity(query_embedding, embeddings_matrix)[0]
        df['similarity'] = similarities

        # Get top 250 matches
        top_250_matches = df.sort_values(by='similarity', ascending=False).head(250)
        combined_deets = top_250_matches["text_for_prompt"].astype(str).str.cat(sep="____\n\n\n")

        prompt = f"""You work for the Department of Health and Social Care in the United Kingdom.
Below, you have been provided a set of projects supported by National Institute for Health and Care (NIHR) infrastructure.
You have been provided the project titles, research summaries, with the centre and year the project took place.
There may be duplicated projects.
I want you to provide an overview of the work relevant to the query: "{query}".{focus_text}
Try to advertise NIHR positively, linking between the sources to show how NIHR supports innovation across the translational pathway. Talk about the researchers and centres where appropriate. Link together centres and researchers when it is the same project where appropriate.
Ensure that you write in a neutral scientific tone, being as precise as possible. Only talk about the evidence you are presented with in the prompt, but make the links between them whenever possible.

Projects:
{combined_deets}

"""

        generation_config = {
            "temperature": 0.2,
            "top_p": 0.1,
            "top_k": 5,
            "max_output_tokens": 8192,
            "response_mime_type": "text/plain",
        }

        model = genai.GenerativeModel(
            model_name="gemini-2.0-flash",
            generation_config=generation_config,
        )

        # Generate response
        with st.spinner("‚ú® Generating summary..."):
            response = model.generate_content(prompt)

        # Display response
        st.subheader(f"üì¢ Summary for Query: '{query}'")
        st.write(response.text)

        # Option to download the summary
        st.download_button(
            label="üì• Download Summary as TXT",
            data=response.text,
            file_name=f"nihr_summary_{query.replace(' ', '_')}.txt",
            mime="text/plain",
        )
        # Prepare CSV export (excluding embeddings and text_for_prompt)
        output_df = top_250_matches.drop(columns=['embeddings', 'text_for_prompt'])
        # Provide a download button for the CSV
        st.download_button(
            label="üì• Download Results as CSV",
            data=output_df.to_csv(index=False),
            file_name=f"nihr_query_results_{query.replace(' ', '_')}.csv",
            mime="text/csv",
        )

        
    except Exception as e:
        st.error(f"üö´ An error occurred: {e}")
else:
    st.info("üí° Enter your API key and query to go...")





