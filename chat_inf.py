# %%

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
import google.generativeai as genai
import os

# Streamlit App Configuration
st.set_page_config(page_title="NIHR Project Query Tool", layout="wide")
st.title("🔍 NIHR Project Query Tool")

st.markdown("""
This tool allows you to query NIHR-supported projects and get a summary generated by the Gemini AI model.
- Enter your **Google API Key**.
- Enter your **query** (e.g., "cancer research").
- Upload the **embeddings pickle file** (`inf_emb.pkl`).
- Receive an **overview of relevant projects**.
""")

# User Input: API Key and Query
api_key = st.text_input("🔑 Enter your Google API Key:", type="password")
query = st.text_input("📝 Enter your query:")
uploaded_file = st.file_uploader("📂 Upload the embeddings pickle file (`inf_emb.pkl`):", type=["pkl"])

if api_key and query and uploaded_file:
    try:
        # Load Data
        df = pd.read_pickle(uploaded_file)
        df['text_for_prompt'] = (
            "Project Title: " + df['Study Title'] + "\n\n" +
            "Research Summary: " + df['Project Summary'] + "\n\n" +
            "Centre: " + df['Centre'] + "\n\n" +
            "Financial Year: " + df['Financial Year']
        )

        # Configure Gemini API
        genai.configure(api_key=api_key)

        # Function to generate query embeddings
        def generate_embedding(text):
            response = genai.embed_content(
                model="models/text-embedding-004",
                content=text,
                task_type="semantic_similarity",
            )
            return np.array(response['embedding']).reshape(1, -1)

        # Generate embedding for the query
        with st.spinner("🔄 Generating query embedding..."):
            query_embedding = generate_embedding(query)

        # Prepare embeddings matrix
        embeddings_matrix = np.vstack(df['embeddings'].values)

        # Calculate cosine similarity
        similarities = cosine_similarity(query_embedding, embeddings_matrix)[0]
        df['similarity'] = similarities

        # Get top 100 matches
        top_100_matches = df.sort_values(by='similarity', ascending=False).head(100)
        combined_deets = top_100_matches["text_for_prompt"].astype(str).str.cat(sep="____\n\n\n")

        prompt = f"""You work for the Department of Health and Social Care in the United Kingdom.
Below, you have been provided a set of projects supported by National Institute for Health and Care (NIHR) infrastructure.
You have been provided the project titles, research summaries, with the centre and year the project took place.
There may be duplicated projects.
I want you to provide an overview of the work relevant to the query: "{query}"
Try to advertise NIHR positively, linking between the sources to show how NIHR supports innovation across the translational pathway.
Ensure that you write like in a neutral scientific tone. Only talk about the evidence you are presented with in the prompt, but make the links between them whenever possible.

Projects:
{combined_deets}

"""

        generation_config = {
            "temperature": 0.2,
            "top_p": 0.1,
            "top_k": 5,
            "max_output_tokens": 4000,
            "response_mime_type": "text/plain",
        }

        model = genai.GenerativeModel(
            model_name="gemini-2.0-flash",
            generation_config=generation_config,
        )

        # Generate response
        with st.spinner("✨ Generating summary..."):
            response = model.generate_content(prompt)

        # Display response
        st.subheader(f"📢 Summary for Query: '{query}'")
        st.write(response.text)

        # Option to download the summary
        st.download_button(
            label="📥 Download Summary as TXT",
            data=response.text,
            file_name=f"nihr_summary_{query.replace(' ', '_')}.txt",
            mime="text/plain",
        )

    except Exception as e:
        st.error(f"🚫 An error occurred: {e}")
else:
    st.info("💡 Enter your API key, query, and upload the embeddings file to get started.")





